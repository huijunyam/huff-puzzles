 
/** 
 *  DISTRIBUTE HUFF EXERCISE
 *  
 *  The task is to enable this contract, when called with function `distribute(address[])` to
 *  distribute the value sent with the call to each address in the address array as evenly.
 *  Revert if array length is 0
 *  Assume that array length would always be less than or equal to msg.value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function distribute(address[]) payable returns()


 #define macro MAIN() = takes(0) returns(0) {
    0x00
    calldataload
    0xE0
    shr

    __FUNC_SIG(distribute) eq distribute jumpi
    revert 
    
    distribute:
        DISTRIBUTE()
}

#define macro DISTRIBUTE() = takes(0) returns(0) {
    0x24 calldataload 
    dup1 iszero revertJump jumpi 
    callvalue 
    div
    0x24 calldataload 
    0x24 // offset 
    start: 
        dup2 iszero endJump jumpi
        0x20 add 
        dup1 calldataload 
        dup4 

        TRANSFER()

        swap1 
        0x01 swap1 sub 
        swap1 
        start jump


    revertJump:
        0x00 0x00 revert
    endJump:

}

#define macro TRANSFER() = takes(2) returns(0) {
    // input [address, val]
    0x00
    0x00
    0x00
    0x00
    swap4 swap1 swap5 
    gas 
    call 
    success jumpi
    0x00 0x00 revert

    success:
}